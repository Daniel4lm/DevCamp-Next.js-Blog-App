// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  avatarUrl      String?
  username       String         @unique
  fullName       String
  email          String         @unique
  hashedPassword String
  insertedAt     DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  refreshToken   String?
  role           String         @default("user") // user, admin
  profile        Profile?
  posts          Post[]
  postsCount     Int            @default(0)
  comments       Comment[]
  likes          Like[]
  followings     UserFollower[] @relation("Followings")
  followers      UserFollower[] @relation("Followers")
  followersCount Int            @default(0)
  followingCount Int            @default(0)

  @@map("users")
}

model UserFollower {
  followedId String
  followed   User   @relation("Followings", fields: [followedId], references: [id], onDelete: Cascade)
  followerId String
  follower   User   @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followedId, followerId])
  @@map("user_followers")
}

model Profile {
  id                 String    @id @default(cuid())
  bio                String?
  userId             String    @unique
  password_updatedAt DateTime?
  lastLogin          DateTime?
  themeMode          ThemeMode @default(LIGHT)
  website            String?
  location           String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

enum ThemeMode {
  LIGHT
  DARK
}

model Post {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  body          String    @db.Text()
  photo_url     String?
  published     Boolean   @default(false)
  totalLikes    Int       @default(0)
  likes         Like[]
  totalComments Int       @default(0)
  readTime      Int       @default(0)
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  tags          Tag[]

  @@map("posts")
}

model Like {
  // id        String   @id @default(cuid())
  authorId   String
  resourceId String   @unique
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId  String?
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([authorId, resourceId])
  @@map("likes")
}

model Tag {
  id    String @id @default(cuid())
  name  String @db.VarChar(50)
  posts Post[]

  @@unique([name])
  @@map("tags")
}

model Comment {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String    @db.Text()
  totalLikes Int       @default(0)
  authorId   String
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId    String?
  reply      Comment?  @relation("Replies", fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies    Comment[] @relation("Replies")
  likes      Like[]

  @@map("comments")
}
